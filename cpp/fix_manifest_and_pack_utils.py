# Python function to fix the paths in the manifest file generated by UECASTOC so that UECASTOC can pack the files.

# Caveats:
#  - The filenames in each mod must be unique.  In other words, a specific mod should not have files with the same name in different folders.
#  - Mod names should not have spaces or other strange characters (like /, \, or . )

# Usage:
#   - Set the manifest_file argument to the manifest file generated by UECASTOC when you unpacked
#   - Set the directory_to_pak argument to the directory you want to pack
#   - The directory structure should be the usual structure we are used to from before IoStore (e.g., as used by FluffyQuack's UnrealPak scripts).
#       For example, for Hogwarts Legacy, it should be z_your_mod_name_P\phoenix\Content\...  and you would then set directory_to_pak = 'z_your_mod_name_P'
#   - The function will attempt to find the files in the directory you want to pack, fix the manifest accordingly, and pack the files into packed/...

import os
import json
import pathlib
import shutil

def fix_manifest_and_pack_iostore(directory_to_pak, manifest_file, manifest_dir, uecastoc_executable_path):
    with open(manifest_dir+'\\'+manifest_file, 'r') as fp:
        manifest_dict = json.load(fp)

        with open("fixed_"+manifest_file,'w') as fout:
            print("Fixing the paths in the manifest file so that the packer can find them...")
            file_idx = 0
            for file_entry in manifest_dict['Files']:
                if(not(file_entry['Path']=='dependencies')):
                    filename_to_find = file_entry['Path'][1:]  # get rid of leading /
                    my_file = []
                    for path in pathlib.Path(directory_to_pak).rglob(filename_to_find):
                        my_file.append(path)
                    if (len(my_file)==0):
                        print("WARNING:  could not find "+filename_to_find)
                    if(len(my_file)>1):
                        print("WARNING:  found multiple instances of "+filename_to_find+":")
                        for path in my_file:
                            print(path)
                    for path in my_file:
                        python_path = str(path)
                        fixed_path ='/' + ('/').join(python_path.split('\\')[1:])
                        print(fixed_path)
                        manifest_dict['Files'][file_idx]['Path'] = fixed_path
                file_idx = file_idx+1

            print("Writing new manifest file "+"fixed_"+manifest_file)
            json.dump(manifest_dict, fout, indent=2)


    print("Packing "+directory_to_pak)
    json_path = pathlib.Path("fixed_"+manifest_file)


    my_cmd = uecastoc_executable_path+'\main.exe pack \"' + str(directory_to_pak)+'\" \"' + str(json_path) + '\" \"packed\\' +directory_to_pak+ '\" None'
    print(my_cmd)
    os.system(my_cmd)


